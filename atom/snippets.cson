# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

".source.js":
  # Vanila JS
  "Object loop":
    prefix: "for"
    body: """
      for(let ${1:property} in ${2:object}) {
        if( !$2.hasOwnProperty($1) ){ continue; }

        $0
      }$3
    """
  "Colored Console Log":
    prefix: "log"
    body: """
      /* */
      console.log(
        "%c$1",
        "color: ${2:purple}"$0
      );
      //*/$3
    """
  # Bootbox.js
  "Bootbox Alert":
    prefix: "alert"
    body: """
      bootbox.dialog({
        backdrop: ${1:false},
        title: "${2:Title}",
        message: '${3:message}',
        buttons: {
          ok: {
            label: "OK",
            className: "btn-primary",
            callback: () => {
              ${4:loadingOverlay.fadeOut();}$0
            }
          }
        }
      });$5
    """
  "Bootbox Dialog":
    prefix: "dialog"
    body: """
      bootbox.dialog({
        backdrop: ${1:false},
        title: "${2:Title}",
        message: '${3:message}',
        closeButton: false,
        buttons: {
          no: {
            label: "No",
            className: "btn-default",
            callback: () => {
              ${4:loadingOverlay.fadeOut();}
            }
          },
          yes: {
            label: "Yes",
            className: "btn-primary",
            callback: () => {
              $0
            }
          }
        }
      });$5
    """
  #iGrowl.js
  "iGrowl Notification Condensed":
    prefix: "igrowl"
    body: """
      ${1:Ember.\\$}.iGrowl({
        type: '${2:error}', // info, success, notice, error, simple, {type}-sat

        title: ${3:null},
        message: ${4:"Unknown error. Check logs."},

        delay: 2500
      });$0
    """
  # Ember.js
  "Ember Colored Console Log":
    prefix: "log"
    body: """
      /* */
      Ember.Logger.log(
        "%c%s#$1",
        "color: ${2:purple}",
        ${3:this}.toString()$4
      );
      //*/$4
    """
  "Ember Save model":
    prefix: "modelsave"
    body: """
      let ${1:model} = this.get('model');

      $1.${2:save}().then(
        (/*response*/) => {
          // Success$0
          this.get('store').unloadRecord($1);
        }, (response) => {
          $1.rollbackAttributes();

          Ember.Logger.log(
            "%c%s# ${3:$2} ERROR: %O",
            "color: red", // http://www.w3schools.com/html/html_colornames.asp
            $1.toString(),
            response
          );

          Ember.\\$.iGrowl({
            "type": 'error',

            "title": "Unable to $3",
            "message": response.errors[0].detail || "Unknown error. Check logs",

            "delay": 2500,
          });
        }
      );$4
    """
  "Ember Set AJAX Headers":
    prefix: "ajaxheaders"
    body: """
      Ember.\\$.ajaxSetup({
        headers: {
          $0
        }
      });$1
    """
  "Ember RSVP Promise":
    prefix: "promise"
    body: """
      let promise = new Ember.RSVP.Promise((resolve, reject) => {
        let ajaxSettings = {
          type: "${1:POST}",
          url: ${2:url},
          dataType: "json",
          data: ${3:\\{\\}},
          success: (response) => {
            // Prior to the promise resolution.
            return resolve(response);
          },
          error: (error) => {
            // Prior to the promise rejection.
            return reject(error);
          }
        };

        Ember.\\$.ajax(ajaxSettings);
      }).then(
        (/*response*/) => {
          // After resolution but before promise result is passed back to app.$0
        }, (error) => {
          // After  resolution but before promise result is passed back to app.
          return Ember.RSVP.reject({
            status: error.responseJSON.errors[0].status,
            message: error.responseJSON.errors[0].detail
          });
        }
      ).finally(() => {
        // After resolution but before promise result is passed back to app.
      });$4
    """
  "Ember Computed Property":
    prefix: "computed"
    body: """
      Ember.computed($0{
        get(key) {
          return key;
        },
        set(key, val) {
          return val;
        }
      }),$1
    """
  "Ember Property Observer":
    prefix: "observer"
    body: """
      Ember.observer($1
        function() {
          $0
        }
      ),$2
    """
  "Ember.RSVP Promise Group":
    prefix: "promiseGroup"
    body: """
      let promiseGroup, promises = [

      ];

      promiseGroup = Ember.RSVP.allSettled(promises).then((responseArray) => {
        let rejections = responseArray.filterBy('state', 'rejected');

        if(rejections.length > 0) {
          // Rejections present...
          Ember.Logger.log(
            "%c%s#beforeModel promiseGroup.allSettled ERRORS: %O",
            "color: red", // http://www.w3schools.com/html/html_colornames.asp
            this.toString(),
            rejections
          );
        } else {
          // No rejections...
        }
      });$1
    """
".source.js, .text.html.basic":
  # moment.js
  "'Feb 2nd, 1983 8:00 am'":
    prefix: "moment"
    body: "'MMM Do, YYYY h:mm a'$1"
  "'February 2nd, 1983 8:00 am'":
    prefix: "moment"
    body: "'MMMM Do, YYYY h:mm a'$1"
  "'Wed, Feb 2nd, 1983 8:00 am'":
    prefix: "moment"
    body: "'ddd, MMM Do, YYYY h:mm a'$1"
  "'Wednesday, February 2nd, 1983 8:00 am'":
    prefix: "moment"
    body: "'dddd, MMMM Do YYYY h:mm a'$1"
  "'YYYY-MM-DD HH:mm:ss'":
    prefix: "moment"
    body: "'YYYY-MM-DD HH:mm:ss'$1"
  "'YYYY-MM-DD'":
    prefix: "moment"
    body: "'YYYY-MM-DD'$1"
".text.html, .text.html.php, .source.js":
  "'0000-00-00 00:00:00'":
    prefix: "date"
    body: "'0000-00-00 00:00:00'$1"
".text.html.php, .source.js":
  "Comment Title":
    prefix: "//title"
    body: """
      ////${1/./\\//g}///
      //! ${1:Title} //
      ////${1/./\\//g}///
      $0
    """
".text.html.php":
  "API endpoint":
    prefix: "endpoint"
    body: """
      class ${1:ClassName} extends Request {
        # Protected variables for processing requests.
        protected \\$table_name = '${2:table_name}';
        protected \\$primary_key = '${3:id}';
        protected \\$response_key = '${4:emberKey}';

        # SELECT an item from the database.
        protected function GET() {
          throw new Exception("Getting disabled", 405);

          \\$session = \\$this->authorize();
          \\$response = parent::GET();

          /*  /
          \\$e_message = sprintf(
            '\\$response: %s',
            print_r(\\$response, true)
          );
          error_log("== [" . __file__ . " (" . __LINE__ . ")] \\$e_message");
          //*/

          return \\$response;
        }

        # UPDATE and item in the database.
        protected function PUT() {
          throw new Exception("Saving disabled", 405);

          \\$session = \\$this->authorize();
          \\$response = parent::PUT();

          /*  /
          \\$e_message = sprintf(
            '\\$response: %s',
            print_r(\\$response, true)
          );
          error_log("== [" . __file__ . " (" . __LINE__ . ")] \\$e_message");
          //*/

          return \\$response;
        }

        # INSERT an item into the database.
        protected function POST() {
          throw new Exception("Creating disabled", 405);

          \\$session = \\$this->authorize();
          \\$response = parent::POST();

          /*  /
          \\$e_message = sprintf(
            '\\$response: %s',
            print_r(\\$response, true)
          );
          error_log("== [" . __file__ . " (" . __LINE__ . ")] \\$e_message");
          //*/

          return \\$response;
        }

        # DELETE an item from the database.
        protected function DELETE() {
          throw new Exception("Deleting disabled", 405);

          \\$session = \\$this->authorize();
          \\$response = parent::DELETE();

          /*  /
          \\$e_message = sprintf(
            '\\$response: %s',
            print_r(\\$response, true)
          );
          error_log("== [" . __file__ . " (" . __LINE__ . ")] \\$e_message");
          //*/

          return \\$response;
        }
      }$5
    """
