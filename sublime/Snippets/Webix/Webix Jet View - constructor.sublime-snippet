<snippet>
	<content><![CDATA[import { JetView } from "webix-jet";

export default class $1View extends JetView {
	constructor(app, name, opts) {
		super(app, name);

	  // Preserve the class instance of `this`.
	  const self = this;

		name = name || "%1";

		opts = opts || {};

		self.options = webix.extend({
			name: name
		}, opts, true);

	  // Setup the webix view.
	  let view = {
	  	name: "${1/^(\w+)(View|Widget)$/$1/}"
	  };

    // Retain any base `css` class setups.
    if(typeof self.view.css === "string" || typeof view.css === "string") {
      view.css = [self.view.css, view.css].join(" ");
    }

	  // Set a class variable to view config.
	  self.view = webix.extend(self.view, view, true);

	  // Forward the options on to the view for easier querying.
	  self.view.options = self.options;
	}

	// Ref: https://webix.gitbook.io/webix-jet/part-ii-webix-jet-in-details/views-and-subviews#jetview-methods

	/**
	 * This method returns the initial UI configuration of a view.
	 */
	config() {
		return this.view;
	}

	/**
	 * Called only once for every instance of a view class when the view is rendered. It is a good place to load some common data (list of options for a select in a form, for example) or to change the initial UI configuration of a view returned by config().
	 * @param {webux.ui} view - the view UI.
	 * @param {array} url - the app URL as an array.
	 */
	//init(view, url) {}

	/**
	 * Called every time the URL is changed. It reacts to the change in the URL. urlChange() is only called for the view that is rendered and for its parent.
	 * @param {webux.ui} view - the Webix widget inside the Jet view class.
	 * @param {array} url the - URL as an array of URL elements.
	 */
	//urlChange(view, url) {}

	/**
	 * Called when the current view and all its subviews have been rendered.
	 * @param {webux.ui} view - the Webix widget inside the Jet view class.
	 * @param {array} url the - URL as an array of URL elements.
	 */
	//ready(view, url) {}

	/**
	 * Called only once for each class instance when the view is destroyed (closed and no longer present in the URL).
	 */
	//destroy() {}
};]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>webixjetview</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.js</scope>
	<!-- Optional: Set a description for the snippet. Sublime will default to file name if not present -->
	<description>Webix Jet View - constructor</description>
</snippet>