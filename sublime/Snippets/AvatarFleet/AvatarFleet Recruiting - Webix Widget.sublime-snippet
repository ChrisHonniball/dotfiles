<snippet>
	<content><![CDATA[//////////////////////////////////////////
//!          Frontend Version           //
//////////////////////////////////////////

class ${1:${TM_FILENAME/(\w+)\.js/\1/g}} extends BaseWidget {
	/**
	 * Constructs the class.
	 * Any object variables or options need to be configured here.
	 */
	constructor(options) {
	  // Call `super` to build the parent class.
	  super(options);

	  // Preserve the class instance of `this`.
	  const self = this;

	  // Ensure options are an object.
	  options = options || {};

	  self.options = webix.extend(
	    { //defaults
	      disabled: false
	    },
	    self.options,
	    true
	  );

	  // Setup the webix view.
	  let view = {
	  	name: "${1/^(\w+)(View|Widget)$/$1/}"
	  };

    // Retain any base `css` class setups.
    if(typeof self.view.css === "string" || typeof view.css === "string") {
      view.css = [self.view.css, view.css].join(" ");
    }

	  // Set a class variable to view config.
	  self.view = webix.extend(self.view, view, true);

	  // Forward the options on to the view for easier querying.
	  self.view.options = self.options;
	}
}

/**
 * Creates a global function for the class constructor.
 * Is needed for old "compliance" methodology.
 * @return {object} - The view class that webix needs to construct the ui element.
 */
function ${1/^(\w{1})(.*)$/\L$1\E$2/}(options) {
	let widget = new $1(options);
	return widget.build();
}


///////////////////////////////////////
//!          Admin Version           //
///////////////////////////////////////

class $1Admin extends BaseWidget {
	/**
	 * Constructs the class.
	 * Any object variables or options need to be configured here.
	 * `super` IS needed because the parent class has a `constructor`.
	 * IF you add constructor arguments to the parend class you need to pass them to `super` AND include them in the list of arguments for this constructor otherwise they will be lost.
	 *
	 * We do this a second time so that this view inherits all of the parent view's options.
	 */
	constructor(options) {
	  // Call `super` to build the parent class.
	  super(options);

	  // Preserve the class instance of `this`.
	  const self = this;

	  // Inject some defaults to ensure that we have values.
	  self.options = webix.extend(
	    { //defaults
	      disabled: false
	    },
	    self.options,
	    true
	  );

	  self.view = {
	    view: "form",
	    name: "widgetConfigForm",

	    complexData: true,

	    rows: [
        {
          template: "This widget has no settings.",
          css: "w3-text-orange",
          autoheight: true,
          borderless: true
        }
	    ]
	  };
	}
}

/**
 * Creates a global function for the class constructor.
 * Is needed for old "compliance" methodology.
 * @return {object} - The view class that webix needs to construct the ui element.
 */
function ${1/^(\w{1})(.*)$/\L$1\E$2/}Admin(options) {
	let widget = new $1Admin(options);
	return widget.build();
}]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>webix-widget</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.js</scope>
	<!-- Optional: Set a description for the snippet. Sublime will default to file name if not present -->
	<description>AvatarFleet Recruiting - Webix Widget</description>
</snippet>