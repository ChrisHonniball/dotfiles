<snippet>
	<content><![CDATA[//////////////////////////////////////////
//!          Frontend Version           //
//////////////////////////////////////////

class ${1:${TM_FILENAME/(\w+)\.js/\1/g}} extends BaseView {
	config() {
	  const self = this;

	  self.options = webix.extend(
	    { //defaults
		  	name: "$1"
	      disabled: false
	    },
	    self.options,
	    true
	  );

    // Setup the webix view.
    let view = {
      name: self.options.name,
      id: self.options.id,
      \$\$locator: self.options.name,$0
    };

    // Retain any base `css` class setups.
    if(typeof objectPath.get(self, "options.css") === "string" || typeof objectPath.get(view, "css") === "string") {
      view.css = [objectPath.get(self, "options.css", ""), objectPath.get(view, "css", ""), "widget"].join(" ");
    }

    // Forward the options on to the view for easier querying.
    view.options = self.options;

    view.$scope = self;

    view.widget = true;

    return view;
	}
}

/**
 * Creates a global function for the class constructor.
 * Is needed for old "compliance" methodology.
 * @return {object} - The view class that webix needs to construct the ui element.
 */
function ${1/^(\w{1})(.*)$/\L$1\E$2/}(options) {
	let widget = new $1(options);
	return widget.build();
}


///////////////////////////////////////
//!          Admin Version           //
///////////////////////////////////////

class $1Admin extends BaseWidget {
	config() {
	  const self = this;

	  // Inject some defaults to ensure that we have values.
	  self.options = webix.extend(
	    { //defaults
        name: "widgetConfigForm",
	      disabled: false
	    },
	    self.options,
	    true
	  );

	  self.view = {
	    view: "form",
      name: self.options.name,
      id: self.options.id,
      \$\$locator: self.options.name,

	    complexData: true,

	    rows: [
        {
          template: "This widget has no settings.",
          css: "w3-text-orange",
          autoheight: true,
          borderless: true
        }
	    ]
	  };
	}
}

/**
 * Creates a global function for the class constructor.
 * Is needed for old "compliance" methodology.
 * @return {object} - The view class that webix needs to construct the ui element.
 */
function ${1/^(\w{1})(.*)$/\L$1\E$2/}Admin(options) {
	let widget = new $1Admin(options);
	return widget.build();
}]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>webixwidget</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.js</scope>
	<!-- Optional: Set a description for the snippet. Sublime will default to file name if not present -->
	<description>AvatarFleet Recruiting - Webix Widget</description>
</snippet>