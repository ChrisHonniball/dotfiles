extends html

snippet try "try{} catch(){}"
try {
	$0
} catch(Exception $e) {
	throw new Exception($e->getMessage(), $e->getCode());
}
endsnippet

snippet csv "Process CSV file"
if( ($file_handle = fopen($filepath, "r")) === FALSE ){
	// Unable to open file...
} else {
	// Process file...
	$row_count = 0;
	
	while( ($raw_data = fgetcsv($file_handle, 10000, ",")) !== FALSE ){
		$0
		
		$row_count++;
	}
	
	// Close file...
	fclose($file_handle);
}
endsnippet

# Comments
snippet //title "Comment Title"
////${1/./\//g}///
//! ${1:Title} //
////${1/./\//g}///
$0
endsnippet

snippet #title "Comment Title"
###${1/./#/g}##
#! ${1:Title} #
###${1/./#/g}##
$0
endsnippet

# date()
snippet date "'Y-m-d H:i:s'" i
'Y-m-d H:i:s'
endsnippet

snippet date "'0000-00-00 00:00:00'" i
'0000-00-00 00:00:00'
endsnippet

snippet date "Feb 2nd, 1983 8:00 am" i
'M jS, Y g:i a'
endsnippet

snippet date "February 2nd, 1983 8:00 am" i
'F jS, Y g:i a'
endsnippet

snippet date "Wed, Feb 2nd, 1983 8:00 am" i
'D, M jS, Y g:i a'
endsnippet

snippet date "Wednesday, February 2nd, 1983 8:00 am" i
'l, F jS, Y g:i a'
endsnippet

# error_log()
snippet log "Standard file log"
/* */
$e_message = sprintf(
	'${1}'
);
error_log("${2:==} [" . __file__ . " (" . __LINE__ . ")] $e_message");
//*/
endsnippet

snippet log "Variable test"
/* */
$e_message = sprintf(
	'VAR TEST: ${1:VarName}: %s',
	print_r($1, true)
);
error_log("!! [" . __file__ . " (" . __LINE__ . ")] $e_message");
//*/
endsnippet

# MySQLi
snippet query "Basic MySQLi Query with Loop"
if(!$${1:this}->query($${2:query})){
	$e_message = sprintf(
		"%s\\n\\n%s",
		$$1->error(),
		$$2
	);
	error_log("${3:--} [" . __file__ . " (" . __LINE__ . ")] $e_message");
	throw new Exception("$4Database error.", 400);
} else {
	if($$1->affected_rows() === 0){
		// Error
	} else {
		// Success
		while($row = $$1->fetch_assoc()){
			$0
		}
	}
}
endsnippet

snippet log "MySQLi Error"
$e_message = sprintf(
	"%s\\n\\n%s",
	$${1:MySQLiClass}->error(),
	$query
);
error_log("${2:--} [" . __file__ . " (" . __LINE__ . ")] $e_message");
endsnippet

# Gozooga
snippet endpoint "API endpoint"
class ${1:ClassName} extends Request {
	# Protected variables for processing requests.
	protected $table_name = '${2:table_name}';
	protected $primary_key = '${3:id}';
	protected $response_key = '${4:emberKey}';
	
	# SELECT an item from the database.
	protected function GET(){
		throw new Exception("Getting disabled", 405);
		
		$session = $this->authorize();
		$response = parent::GET();
		
		/*
		$e_message = sprintf(
			'$response: %s',
			print_r($response, true)
		);
		error_log("== [" . __file__ . " (" . __LINE__ . ")] $e_message");
		//*/
		
		return $response;
	}
	
	# UPDATE and item in the database.
	protected function PUT(){
		throw new Exception("Saving disabled", 405);
		
		$session = $this->authorize();
		$response = parent::PUT();
		
		/*
		$e_message = sprintf(
			'$response: %s',
			print_r($response, true)
		);
		error_log("== [" . __file__ . " (" . __LINE__ . ")] $e_message");
		//*/
		
		return $response;
	}
	
	# INSERT an item into the database.
	protected function POST(){
		throw new Exception("Creating disabled", 405);
		
		$session = $this->authorize();
		$response = parent::POST();
		
		/*
		$e_message = sprintf(
			'$response: %s',
			print_r($response, true)
		);
		error_log("== [" . __file__ . " (" . __LINE__ . ")] $e_message");
		//*/
		
		return $response;
	}
	
	# DELETE an item from the database.
	protected function DELETE(){
		throw new Exception("Deleting disabled", 405);
		
		$session = $this->authorize();
		$response = parent::DELETE();
		
		/*
		$e_message = sprintf(
			'$response: %s',
			print_r($response, true)
		);
		error_log("== [" . __file__ . " (" . __LINE__ . ")] $e_message");
		//*/
		
		return $response;
	}
}
endsnippet

snippet phpmailer "PHPMailer compose"
// Compose Email
$content_html = sprintf(
	$this->get_email_template("${1:password-reset}")
);

$email_subject = "${2:Subject}";

ob_start();
$email = new Email($email_subject);
$email->set_heading($email_subject);

$email->set_content($content_html);
$email->render();

$html_message = ob_get_contents();
ob_end_clean();

$phpmailer->From = "support@gozooga.com";
$phpmailer->FromName = "${3:Gozooga Support}";

$phpmailer->Subject = $email_subject;

$phpmailer->msgHTML($html_message);
$phpmailer->addReplyTo("support@gozooga.com","Gozooga Support");
$phpmailer->addAddress($User->get_data('contact_email'), $User->get_data('contact_first_name')." ".$User->get_data('contact_last_name'));
// $phpmailer->addAttachment(${4:$attachment_path}, ${5:$attachment_name}); // attachment
$phpmailer->isHTML(true);

if(!$phpmailer->send()){
	$e_message = $phpmailer->ErrorInfo;
	error_log("== [" . __file__ . " (" . __LINE__ . ")] $e_message");
}

$phpmailer->clearAllRecipients();
endsnippet

snippet sanitize "Sanitize API values for insert/update"
$table_columns = $this->get_table_columns('${1:table_name}');

foreach( ${2:$model} as $col => $val ){
	if( array_key_exists($col, $table_columns) ){
		$val = $this->sanitize_db_column($table_columns[$col], $val);
		$2_updates[$col] = sprintf('$1.%s = "%s"', $col, $val);
		$2[$col] = $val;
	}
}
$query = sprintf(
	'UPDATE $1 SET %s WHERE ${3:client_id} = %s;',
	implode(', ', $2_updates),
	${4:$client_id}
);
endsnippet

snippet mandrill "MandrillMailer Email"
try {
	$MandrillMailer = new MandrillMailer;
	$MandrillMailer->set_sender('support@gozooga.com', 'Gozooga Support');
	
	// Load the email template from the database.
	$MandrillMailer->load_email(${1:email_id});
	
	// Set any global merge variables that are needed on all emails.
	$MandrillMailer->set_global_merge_vars([
		// example: "companyName" => $client['company_name']
	]);
	
	// Set addresses and merge variables specific to this recipient.
	$MandrillMailer->add_address(${2:$user['contact_email']}, ${3:$user['contact_first_name'].' '.$user['contact_last_name']});
	$MandrillMailer->set_merge_vars($2, [
		// example: "username" => $user['username']
	]);
	
	// Add tags for the email to be searched in Mandrill.
	$MandrillMailer->add_tag('${4:email-tag}');
	
	// Send the email.
	$MandrillMailer->send();
	
	$MandrillMailer->clear_addresses();
} catch(Exception $e) {
	throw new Exception($e->getMessage(), $e->getCode());
}
endsnippet
