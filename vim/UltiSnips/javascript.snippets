snippet for "Object loop"
for(let ${1:property} in ${2:object}) {
	if( !$2.hasOwnProperty($1) ){ continue; }
	
	$0
}
endsnippet

# Comments
snippet //title "Comment Title"
////${1/./\//g}///
//! ${1:Title} //
////${1/./\//g}///
$0
endsnippet

# Console Log
snippet log "Standard Console Log"
/* */
console.log($0);
//*/
endsnippet

snippet log "Colored Console Log"
/* */
console.log(
	"%c$1",
	"color: ${2:purple}"$0
);
//*/
endsnippet

# Moment.js
snippet moment "'YYYY-MM-DD HH:mm:ss'" i
'YYYY-MM-DD HH:mm:ss'
endsnippet

snippet moment "'YYYY-MM-DD'" i
'YYYY-MM-DD'
endsnippet

snippet moment "'MM/DD/YYYY'" i
'MM/DD/YYYY'
endsnippet

snippet moment "'Feb 2nd, 1983 8:00 am'" i
'MMM Do, YYYY h:mm a'
endsnippet

snippet moment "'February 2nd, 1983 8:00 am'" i
'MMMM Do, YYYY h:mm a'
endsnippet

snippet moment "'Wed, Feb 2nd, 1983 8:00 am'" i
'ddd, MMM Do, YYYY h:mm a'
endsnippet

snippet moment "'Wednesday, February 2nd, 1983 8:00 am'" i
'dddd, MMMM Do YYYY h:mm a'
endsnippet

# Bootbox.js
snippet dialog "Bootbox Dialog"
bootbox.dialog({
	title: "${1:Title}",
	message: '${2:message}',
	closeButton: false,
	buttons: {
		no: {
			label: "No",
			className: "btn-default",
			callback: () => {
				${3:loadingOverlay.fadeOut();}
			}
		},
		yes: {
			label: "Yes",
			className: "btn-primary",
			callback: () => {
				$0
			}
		}
	}
});
endsnippet

snippet alert "Bootbox Alert"
bootbox.dialog({
	title: "${1:Title}",
	message: '${2:message}',
	buttons: {
		ok: {
			label: "OK",
			className: "btn-primary",
			callback: () => {
				${3:loadingOverlay.fadeOut();}$0
			}
		}
	}
});
endsnippet

# iGrowl.js
snippet igrowl "Condensed iGrowl notification"
${1:Ember.\$}.iGrowl({
	type: '${2:error}', // info, success, notice, error, simple, info-sat, success-sat, notice-sat, error-sat

	title: ${3:null},
	message: ${4:"Unknown error. Check logs."},

	delay: 2500
});$0
endsnippet

# Ember.js
snippet promise "Ember.RSVP.Promise"
let promise = new Ember.RSVP.Promise((resolve, reject) => {
	let ajaxSettings = {
		type: "${1:POST}",
		url: ${2:url},
		dataType: "json",
		data: {$3},
		success: resolve,
		error: reject
	};
	
	Ember.$.ajax(ajaxSettings);
}).then(
	(/*response*/) => {
		// Success$0
	}, (error) => {
		// Fail
		Ember.Logger.log(
			"%c%s ${4:promise} ERROR: %O",
			"color: red", // http://www.w3schools.com/html/html_colornames.asp
			this.toString(),
			error
		);
	}
).finally(() => {
	// Always
});
endsnippet

snippet modelsave "Save model"
let ${1:model} = this.get('model');

$1.${2:save}().then(
	(/*response*/) => {
		// Success$0
	}, (response) => {
		$1.rollbackAttributes();
		
		Ember.Logger.log(
			"%c%s# ${3:$2} ERROR: %O",
			"color: red", // http://www.w3schools.com/html/html_colornames.asp
			$1.toString(),
			response
		);

		Ember.$.iGrowl({
			"type": 'error', // info, success, notice, error, simple, info-sat, success-sat, notice-sat, error-sat

			"title": "Unable to $3",
			"message": response.errors[0].detail || "Unknown error. Check logs",

			"delay": 2500,
		});
	}
);
endsnippet

snippet ajaxheaders "Set AJAX Headers"
Ember.\$.ajaxSetup({
	headers: {
		$0
	}
});
endsnippet

snippet log "Ember Colored Console Log"
/* */
Ember.Logger.log(
	"%c%s#$1",
	"color: ${2:purple}", // http://www.w3schools.com/html/html_colornames.asp
	${3:this}.toString()$0
);
//*/
endsnippet

snippet computed "Ember Computed Property" b
${1:property}: Ember.computed($1{
	get() {
		let that = this;$0
	}
}),
endsnippet

snippet computed "Ember Computed Property" i
Ember.computed($1{
	get() {
		let that = this;$0
	}
}),
endsnippet

snippet observer "Ember Property Observer" b
${1:property}: Ember.observer($1, function(){
	let that = this;$0
}),
endsnippet

snippet observer "Ember Property Observer" i
Ember.observer($1
	function() {
		let that = this;$0
	}
),
endsnippet

snippet csp "Standard Content Security Policy"
contentSecurityPolicy: {
	'default-src': "'none'",

	'script-src': [
		"'self'",
		"maxcdn.bootstrapcdn.com"
	].join(' '),

	'font-src': [
		"'self'",
		"fonts.gstatic.com",
		"maxcdn.bootstrapcdn.com",
		"fonts.googleapis.com"
	].join(' '),

	'connect-src': [
		"'self'"
	].join(' '),

	'img-src': [
		"'self'"
	].join(' '),

	'style-src': [
		"'self'",
		"'unsafe-inline'",
		"fonts.googleapis.com",
		"maxcdn.bootstrapcdn.com"
	].join(' '),

	'media-src': [
		"'self'"
	].join(' ')
},
endsnippet
